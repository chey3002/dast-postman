{
	"info": {
		"_postman_id": "5cfb27b3-28b8-462d-ae78-14a71f6b1113",
		"name": "REST API le connaisseur",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11982269"
	},
	"item": [
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function (user) {",
							"        pm.expect(user).to.have.property('usuario_id');",
							"        pm.expect(user).to.have.property('usuario_nombre');",
							"        pm.expect(user).to.have.property('usuario_email');",
							"        pm.expect(user).to.have.property('usuario_password');",
							"    });",
							"})",
							"",
							"pm.test('Verify that the response content type is \\'application/json\\'', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Usuario_id is a non-negative integer', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (user) {",
							"        pm.expect(user.usuario_id).to.be.a('number').and.to.satisfy(id => id >= 0, 'Usuario_id should be a non-negative integer');",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Post usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response must have content type of application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Response includes the required field \\'Status\\'', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.exist;",
							"})",
							"",
							"pm.test('Status field is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Status should not be empty');",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"usuario_nombre\":\"usuario\",\n    \"usuario_email\":\"usuario@test.com\",\n    \"usuario_password\":\"testtest\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response body has user_id array of objects\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
							"    pm.expect(jsonData[0]).to.have.property('usuario_id');\r",
							"    pm.collectionVariables.set(\"user_id\", jsonData[0].usuario_id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"usuario_email\":\"usuario@test.com\",\r\n    \"usuario_password\":\"testtest\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"usuario_id\": {{user_id}},\n        \"usuario_nombre\": \"Usuario Test\",\n        \"usuario_email\": \"test@hotmail.com\",\n        \"usuario_password\": \"pass\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get All products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(product) {",
							"        pm.expect(product).to.have.property('producto_id');",
							"        pm.expect(product).to.have.property('producto_nombre');",
							"        pm.expect(product).to.have.property('producto_calorias');",
							"        pm.expect(product).to.have.property('producto_proteinas');",
							"        pm.expect(product).to.have.property('producto_grasas');",
							"        pm.expect(product).to.have.property('producto_carbohidratos');",
							"        pm.expect(product).to.have.property('usuario_id');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Producto nombre must be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.producto_nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Usuario_id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.usuario_id).to.be.a('number');",
							"    pm.expect(item.usuario_id).to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/products/all/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"all",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Post producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"product id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('insertId');",
							"    pm.collectionVariables.set(\"product_id\", jsonData.insertId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"producto_nombre\": \"Test Producto\",\n        \"producto_calorias\": 999,\n        \"producto_proteinas\": 99,\n        \"producto_grasas\": 99,\n        \"producto_carbohidratos\": 99,\n        \"usuario_id\": {{user_id}}\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/products/register/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"register",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get productos by user_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (item) {",
							"        pm.expect(item).to.have.property('producto_id');",
							"        pm.expect(item).to.have.property('producto_nombre');",
							"        pm.expect(item).to.have.property('producto_calorias');",
							"        pm.expect(item).to.have.property('producto_proteinas');",
							"        pm.expect(item).to.have.property('producto_grasas');",
							"        pm.expect(item).to.have.property('producto_carbohidratos');",
							"        pm.expect(item).to.have.property('usuario_id');",
							"    });",
							"})",
							"",
							"pm.test('Ensure producto_id is a non-negative integer', function () {",
							"    const responseData = pm.response.json();",
							"    responseData.forEach(function (item) {",
							"        pm.expect(item.producto_id).to.be.a('number');",
							"        pm.expect(item.producto_id).to.be.at.least(0, 'producto_id should be a non-negative integer');",
							"    });",
							"})",
							"",
							"pm.test('Ensure producto_nombre is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (product) {",
							"        pm.expect(product.producto_nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"    });",
							"})",
							"",
							"pm.test('Ensure producto_calorias is a non-negative number', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(product => {",
							"        pm.expect(product.producto_calorias).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"})",
							"",
							"pm.test('Ensure producto_proteinas is a non-negative number', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(product => {",
							"        pm.expect(product.producto_proteinas).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"})",
							"",
							"pm.test('Ensure producto_grasas is a non-negative number', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(product => {",
							"        pm.expect(product.producto_grasas).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"})",
							"",
							"pm.test('Ensure producto_carbohidratos is a non-negative number', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(product => {",
							"        pm.expect(product.producto_carbohidratos).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/products/filtro/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"filtro",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get producto by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/products/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"{{product_id}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"producto_id\":{{product_id}},\n        \"producto_nombre\": \"Test Producto updated\",\n        \"producto_calorias\": 1000,\n        \"producto_proteinas\": 100,\n        \"producto_grasas\": 100,\n        \"producto_carbohidratos\": 100,\n        \"usuario_id\": {{user_id}}\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/products/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"{{product_id}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "post alimentacion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n          \"alimentacion_fecha\": \"2024-05-11\",\r\n          \"producto_id\": {{product_id}},\r\n          \"alimentacion_cantidad\": 1,\r\n          \"usuario_id\": {{user_id}}\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/food/ali",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"food",
						"ali"
					]
				}
			},
			"response": []
		},
		{
			"name": "post alimentacion by user and date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"alimentacion_id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
							"    pm.expect(jsonData[0]).to.have.property('alimentacion_id');\r",
							"    pm.collectionVariables.set(\"alimentacion_id\", jsonData[0].alimentacion_id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n          \"fecha\": \"2024-05-11\",\r\n          \"usuario_id\": {{user_id}}\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/food/dateanduser",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"food",
						"dateanduser"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete alimentacion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.Status).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is an object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/food/ali/{{alimentacion_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"food",
						"ali",
						"{{alimentacion_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response has the required field \\'Status\\'', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.exist;",
							"})",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/products/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"products",
						"{{product_id}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response has the required field \\'Status\\'', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.Status).to.exist;",
							"})",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "base_url",
			"value": "https://le-connaisseur-backend.onrender.com"
		},
		{
			"key": "product_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "alimentacion_id",
			"value": "",
			"type": "string"
		}
	]
}